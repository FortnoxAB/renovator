// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockCommander is an autogenerated mock type for the Commander type
type MockCommander struct {
	mock.Mock
}

type MockCommander_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommander) EXPECT() *MockCommander_Expecter {
	return &MockCommander_Expecter{mock: &_m.Mock}
}

// Run provides a mock function with given fields: head, parts
func (_m *MockCommander) Run(head string, parts ...string) (string, string, int, error) {
	_va := make([]interface{}, len(parts))
	for _i := range parts {
		_va[_i] = parts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, head)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 string
	var r1 string
	var r2 int
	var r3 error
	if rf, ok := ret.Get(0).(func(string, ...string) (string, string, int, error)); ok {
		return rf(head, parts...)
	}
	if rf, ok := ret.Get(0).(func(string, ...string) string); ok {
		r0 = rf(head, parts...)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, ...string) string); ok {
		r1 = rf(head, parts...)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, ...string) int); ok {
		r2 = rf(head, parts...)
	} else {
		r2 = ret.Get(2).(int)
	}

	if rf, ok := ret.Get(3).(func(string, ...string) error); ok {
		r3 = rf(head, parts...)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// MockCommander_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockCommander_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - head string
//   - parts ...string
func (_e *MockCommander_Expecter) Run(head interface{}, parts ...interface{}) *MockCommander_Run_Call {
	return &MockCommander_Run_Call{Call: _e.mock.On("Run",
		append([]interface{}{head}, parts...)...)}
}

func (_c *MockCommander_Run_Call) Run(run func(head string, parts ...string)) *MockCommander_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockCommander_Run_Call) Return(stdOut string, stdErr string, exitCode int, err error) *MockCommander_Run_Call {
	_c.Call.Return(stdOut, stdErr, exitCode, err)
	return _c
}

func (_c *MockCommander_Run_Call) RunAndReturn(run func(string, ...string) (string, string, int, error)) *MockCommander_Run_Call {
	_c.Call.Return(run)
	return _c
}

// RunWithEnv provides a mock function with given fields: env, head, parts
func (_m *MockCommander) RunWithEnv(env []string, head string, parts ...string) (string, string, int, error) {
	_va := make([]interface{}, len(parts))
	for _i := range parts {
		_va[_i] = parts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, env, head)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RunWithEnv")
	}

	var r0 string
	var r1 string
	var r2 int
	var r3 error
	if rf, ok := ret.Get(0).(func([]string, string, ...string) (string, string, int, error)); ok {
		return rf(env, head, parts...)
	}
	if rf, ok := ret.Get(0).(func([]string, string, ...string) string); ok {
		r0 = rf(env, head, parts...)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func([]string, string, ...string) string); ok {
		r1 = rf(env, head, parts...)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func([]string, string, ...string) int); ok {
		r2 = rf(env, head, parts...)
	} else {
		r2 = ret.Get(2).(int)
	}

	if rf, ok := ret.Get(3).(func([]string, string, ...string) error); ok {
		r3 = rf(env, head, parts...)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// MockCommander_RunWithEnv_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunWithEnv'
type MockCommander_RunWithEnv_Call struct {
	*mock.Call
}

// RunWithEnv is a helper method to define mock.On call
//   - env []string
//   - head string
//   - parts ...string
func (_e *MockCommander_Expecter) RunWithEnv(env interface{}, head interface{}, parts ...interface{}) *MockCommander_RunWithEnv_Call {
	return &MockCommander_RunWithEnv_Call{Call: _e.mock.On("RunWithEnv",
		append([]interface{}{env, head}, parts...)...)}
}

func (_c *MockCommander_RunWithEnv_Call) Run(run func(env []string, head string, parts ...string)) *MockCommander_RunWithEnv_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].([]string), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockCommander_RunWithEnv_Call) Return(stdOut string, stdErr string, exitCode int, err error) *MockCommander_RunWithEnv_Call {
	_c.Call.Return(stdOut, stdErr, exitCode, err)
	return _c
}

func (_c *MockCommander_RunWithEnv_Call) RunAndReturn(run func([]string, string, ...string) (string, string, int, error)) *MockCommander_RunWithEnv_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCommander creates a new instance of MockCommander. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommander(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommander {
	mock := &MockCommander{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
